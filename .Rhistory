}
}
out_df <- out_df[order(out_df$Order),]
output$flags <- renderTable(
out_df
)
}
}) #observeEvent
output$download <- downloadHandler(
filestr <- input$csvInput
if(is.null(filestr)) {
showModal(modalDialog(
title = "File Not Found",
paste0("Please upload a CSV file before validating."),
easyClose = TRUE,
footer = NULL
))
}
else {
filename = function() {
paste0(tools::file_path_sans_ext(filestr$datapath), "-flags", ".csv", sep="")
},
content = function(file) {
in_df <- read.csv(filestr$datapath, na.strings=c("", " "), header = TRUE)
colnames(in_df)[colnames(in_df) == "Original.Order.on.hard.copy"] <- "Order"
colnames(in_df)[colnames(in_df) == "proofing.and.data.entry.notes"] <- "Issue"
out_df <- data.frame()
to_validate <- validate_all_list(in_df)
for(df in to_validate) {
if(nrow(df) != 0) {
df <- subset(df, select=c(Order, Issue))
out_df <- rbind(out_df, df)
}
}
out_df <- out_df[order(out_df$Order),]
write.csv(out_df, file)
} #content
}
) #downloadHandler
} #server
shinyApp(ui = ui, server = server)
} #app
#'
#'Runs birdproofr Shiny app
#'
run_birdproofr_app <- function() {
ui <- fluidPage(
titlePanel("birdproofr"),
sidebarLayout(
sidebarPanel(
fileInput("csvInput", "Upload (.csv)", accept=c("text/csv","text/comma-separated-values",".csv")),
#selectInput("birdInput", "Bird", choices = c("Songbird", "Hummingbird")),
actionButton("validateButton", "Show Flags"),
downloadButton("download", "Download Flags (.csv)")
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Data", tableOutput("data")),
tabPanel("Flagged Issues", tableOutput("flags"))
) #tabsetPanel
) #mainPanel
)#sidebarLayout
) #ui
server <- function(input, output) {
observeEvent(input$csvInput, {
filestr <- input$csvInput
output$data <- renderTable(
read.csv(filestr$datapath)
)
}) #observeEvent
observeEvent(input$validateButton, {
filestr <- input$csvInput
if(is.null(filestr)) {
showModal(modalDialog(
title = "File Not Found",
paste0("Please upload a CSV file before validating."),
easyClose = TRUE,
footer = NULL
))
}
else {
in_df <- read.csv(filestr$datapath, na.strings=c("", " "), header = TRUE)
colnames(in_df)[colnames(in_df) == "Original.Order.on.hard.copy"] <- "Order"
colnames(in_df)[colnames(in_df) == "proofing.and.data.entry.notes"] <- "Issue"
out_df <- data.frame()
### Validating
to_validate <- validate_all_list(in_df)
for(df in to_validate) {
if(nrow(df) != 0) {
df <- subset(df, select=c(Order, Issue))
out_df <- rbind(out_df, df)
}
}
out_df <- out_df[order(out_df$Order),]
output$flags <- renderTable(
out_df
)
}
}) #observeEvent
} #server
shinyApp(ui = ui, server = server)
} #app
#'
#'Runs birdproofr Shiny app
#'
run_birdproofr_app <- function() {
ui <- fluidPage(
titlePanel("birdproofr"),
sidebarLayout(
sidebarPanel(
fileInput("csvInput", "Upload (.csv)", accept=c("text/csv","text/comma-separated-values",".csv")),
#selectInput("birdInput", "Bird", choices = c("Songbird", "Hummingbird")),
actionButton("validateButton", "Show Flags"),
downloadButton("download", "Download Flags (.csv)")
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Data", tableOutput("data")),
tabPanel("Flagged Issues", tableOutput("flags"))
) #tabsetPanel
) #mainPanel
)#sidebarLayout
) #ui
server <- function(input, output) {
observeEvent(input$csvInput, {
filestr <- input$csvInput
output$data <- renderTable(
read.csv(filestr$datapath)
)
}) #observeEvent
observeEvent(input$validateButton, {
filestr <- input$csvInput
if(is.null(filestr)) {
showModal(modalDialog(
title = "File Not Found",
paste0("Please upload a CSV file before validating."),
easyClose = TRUE,
footer = NULL
))
}
else {
in_df <- read.csv(filestr$datapath, na.strings=c("", " "), header = TRUE)
colnames(in_df)[colnames(in_df) == "Original.Order.on.hard.copy"] <- "Order"
colnames(in_df)[colnames(in_df) == "proofing.and.data.entry.notes"] <- "Issue"
out_df <- data.frame()
### Validating
to_validate <- validate_all_list(in_df)
for(df in to_validate) {
if(nrow(df) != 0) {
df <- subset(df, select=c(Order, Issue))
out_df <- rbind(out_df, df)
}
}
out_df <- out_df[order(out_df$Order),]
output$flags <- renderTable(
out_df
)
}
}) #observeEvent
output$download <- downloadHandler(
filestr <- input$csvInput
if(is.null(filestr)) {
showModal(modalDialog(
title = "File Not Found",
paste0("Please upload a CSV file before validating."),
easyClose = TRUE,
footer = NULL
))
}
else {
filename = function() {
paste0(tools::file_path_sans_ext(filestr$datapath), "-flags", ".csv", sep="")
},
content = function(file) {
in_df <- read.csv(filestr$datapath, na.strings=c("", " "), header = TRUE)
colnames(in_df)[colnames(in_df) == "Original.Order.on.hard.copy"] <- "Order"
colnames(in_df)[colnames(in_df) == "proofing.and.data.entry.notes"] <- "Issue"
out_df <- data.frame()
to_validate <- validate_all_list(in_df)
for(df in to_validate) {
if(nrow(df) != 0) {
df <- subset(df, select=c(Order, Issue))
out_df <- rbind(out_df, df)
}
}
out_df <- out_df[order(out_df$Order),]
write.csv(out_df, file)
} #content
}
) #downloadHandler
} #server
shinyApp(ui = ui, server = server)
} #app
#'
#'Runs birdproofr Shiny app
#'
run_birdproofr_app <- function() {
ui <- fluidPage(
titlePanel("birdproofr"),
sidebarLayout(
sidebarPanel(
fileInput("csvInput", "Upload (.csv)", accept=c("text/csv","text/comma-separated-values",".csv")),
#selectInput("birdInput", "Bird", choices = c("Songbird", "Hummingbird")),
actionButton("validateButton", "Show Flags"),
downloadButton("download", "Download Flags (.csv)")
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Data", tableOutput("data")),
tabPanel("Flagged Issues", tableOutput("flags"))
) #tabsetPanel
) #mainPanel
)#sidebarLayout
) #ui
server <- function(input, output) {
observeEvent(input$csvInput, {
filestr <- input$csvInput
output$data <- renderTable(
read.csv(filestr$datapath)
)
}) #observeEvent
observeEvent(input$validateButton, {
filestr <- input$csvInput
if(is.null(filestr)) {
showModal(modalDialog(
title = "File Not Found",
paste0("Please upload a CSV file before validating."),
easyClose = TRUE,
footer = NULL
))
}
else {
in_df <- read.csv(filestr$datapath, na.strings=c("", " "), header = TRUE)
colnames(in_df)[colnames(in_df) == "Original.Order.on.hard.copy"] <- "Order"
colnames(in_df)[colnames(in_df) == "proofing.and.data.entry.notes"] <- "Issue"
out_df <- data.frame()
### Validating
to_validate <- validate_all_list(in_df)
for(df in to_validate) {
if(nrow(df) != 0) {
df <- subset(df, select=c(Order, Issue))
out_df <- rbind(out_df, df)
}
}
out_df <- out_df[order(out_df$Order),]
output$flags <- renderTable(
out_df
)
}
}) #observeEvent
output$download <- downloadHandler(
filename = function() {
paste0(tools::file_path_sans_ext(filestr$datapath), "-flags", ".csv", sep="")
},
content = function(file) {
filestr <- input$csvInput
if(is.null(filestr)) {
showModal(modalDialog(
title = "File Not Found",
paste0("Please upload a CSV file before validating."),
easyClose = TRUE,
footer = NULL
))
}
else {
in_df <- read.csv(filestr$datapath, na.strings=c("", " "), header = TRUE)
colnames(in_df)[colnames(in_df) == "Original.Order.on.hard.copy"] <- "Order"
colnames(in_df)[colnames(in_df) == "proofing.and.data.entry.notes"] <- "Issue"
out_df <- data.frame()
to_validate <- validate_all_list(in_df)
for(df in to_validate) {
if(nrow(df) != 0) {
df <- subset(df, select=c(Order, Issue))
out_df <- rbind(out_df, df)
}
}
out_df <- out_df[order(out_df$Order),]
write.csv(out_df, file)
}
} #content
) #downloadHandler
} #server
shinyApp(ui = ui, server = server)
} #app
run_birdproofr_app()
run_birdproofr_app()
#'
#'Runs birdproofr Shiny app
#'
run_birdproofr_app <- function() {
ui <- fluidPage(
titlePanel("birdproofr"),
sidebarLayout(
sidebarPanel(
fileInput("csvInput", "Upload (.csv)", accept=c("text/csv","text/comma-separated-values",".csv")),
#selectInput("birdInput", "Bird", choices = c("Songbird", "Hummingbird")),
actionButton("validateButton", "Show Flags"),
downloadButton("download", "Download Flags (.csv)")
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Data", tableOutput("data")),
tabPanel("Flagged Issues", tableOutput("flags"))
) #tabsetPanel
) #mainPanel
)#sidebarLayout
) #ui
server <- function(input, output) {
observeEvent(input$csvInput, {
filestr <- input$csvInput
output$data <- renderTable(
read.csv(filestr$datapath)
)
}) #observeEvent
observeEvent(input$validateButton, {
filestr <- input$csvInput
if(is.null(filestr)) {
showModal(modalDialog(
title = "File Not Found",
paste0("Please upload a CSV file before validating."),
easyClose = TRUE,
footer = NULL
))
}
else {
in_df <- read.csv(filestr$datapath, na.strings=c("", " "), header = TRUE)
colnames(in_df)[colnames(in_df) == "Original.Order.on.hard.copy"] <- "Order"
colnames(in_df)[colnames(in_df) == "proofing.and.data.entry.notes"] <- "Issue"
out_df <- data.frame()
### Validating
to_validate <- validate_all_list(in_df)
for(df in to_validate) {
if(nrow(df) != 0) {
df <- subset(df, select=c(Order, Issue))
out_df <- rbind(out_df, df)
}
}
out_df <- out_df[order(out_df$Order),]
output$flags <- renderTable(
out_df
)
}
}) #observeEvent
output$download <- downloadHandler(
filename = function() {
if(is.null(input$csvInput)) {
showModal(modalDialog(
title = "File Not Found",
paste0("Please upload a CSV file before validating."),
easyClose = TRUE,
footer = NULL
))
}
else {
filestr <- input$csvInput
paste0(tools::file_path_sans_ext(filestr$datapath), "-flags", ".csv", sep="")
}
},
content = function(file) {
if(is.null(input$csvInput)) {
showModal(modalDialog(
title = "File Not Found",
paste0("Please upload a CSV file before validating."),
easyClose = TRUE,
footer = NULL
))
}
else {
filestr <- input$csvInput
in_df <- read.csv(filestr$datapath, na.strings=c("", " "), header = TRUE)
colnames(in_df)[colnames(in_df) == "Original.Order.on.hard.copy"] <- "Order"
colnames(in_df)[colnames(in_df) == "proofing.and.data.entry.notes"] <- "Issue"
out_df <- data.frame()
to_validate <- validate_all_list(in_df)
for(df in to_validate) {
if(nrow(df) != 0) {
df <- subset(df, select=c(Order, Issue))
out_df <- rbind(out_df, df)
}
}
out_df <- out_df[order(out_df$Order),]
write.csv(out_df, file)
}
} #content
) #downloadHandler
} #server
shinyApp(ui = ui, server = server)
} #app
run_birdproofr_app()
#'
#'Runs birdproofr Shiny app
#'
run_birdproofr_app <- function() {
ui <- fluidPage(
titlePanel("birdproofr"),
sidebarLayout(
sidebarPanel(
fileInput("csvInput", "Upload (.csv)", accept=c("text/csv","text/comma-separated-values",".csv")),
#selectInput("birdInput", "Bird", choices = c("Songbird", "Hummingbird")),
actionButton("validateButton", "Show Flags"),
downloadButton("download", "Download Flags (.csv)")
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Data", tableOutput("data")),
tabPanel("Flagged Issues", tableOutput("flags"))
) #tabsetPanel
) #mainPanel
)#sidebarLayout
) #ui
server <- function(input, output) {
observeEvent(input$csvInput, {
filestr <- input$csvInput
output$data <- renderTable(
read.csv(filestr$datapath)
)
}) #observeEvent
observeEvent(input$validateButton, {
filestr <- input$csvInput
if(is.null(filestr)) {
showModal(modalDialog(
title = "File Not Found",
paste0("Please upload a CSV file before validating."),
easyClose = TRUE,
footer = NULL
))
}
else {
in_df <- read.csv(filestr$datapath, na.strings=c("", " "), header = TRUE)
colnames(in_df)[colnames(in_df) == "Original.Order.on.hard.copy"] <- "Order"
colnames(in_df)[colnames(in_df) == "proofing.and.data.entry.notes"] <- "Issue"
out_df <- data.frame()
### Validating
to_validate <- validate_all_list(in_df)
for(df in to_validate) {
if(nrow(df) != 0) {
df <- subset(df, select=c(Order, Issue))
out_df <- rbind(out_df, df)
}
}
out_df <- out_df[order(out_df$Order),]
output$flags <- renderTable(
out_df
)
}
}) #observeEvent
output$download <- downloadHandler(
filename = function() {
if(is.null(input$csvInput)) {
showModal(modalDialog(
title = "File Not Found",
paste0("Please upload a CSV file before validating."),
easyClose = TRUE,
footer = NULL
))
}
else {
filestr <- input$csvInput
paste(tools::file_path_sans_ext(filestr$datapath), "-flags", ".csv", sep="")
}
},
content = function(file) {
if(is.null(input$csvInput)) {
showModal(modalDialog(
title = "File Not Found",
paste0("Please upload a CSV file before validating."),
easyClose = TRUE,
footer = NULL
))
}
else {
filestr <- input$csvInput
in_df <- read.csv(filestr$datapath, na.strings=c("", " "), header = TRUE)
colnames(in_df)[colnames(in_df) == "Original.Order.on.hard.copy"] <- "Order"
colnames(in_df)[colnames(in_df) == "proofing.and.data.entry.notes"] <- "Issue"
out_df <- data.frame()
to_validate <- validate_all_list(in_df)
for(df in to_validate) {
if(nrow(df) != 0) {
df <- subset(df, select=c(Order, Issue))
out_df <- rbind(out_df, df)
}
}
out_df <- out_df[order(out_df$Order),]
write.csv(out_df, file)
}
} #content
) #downloadHandler
} #server
shinyApp(ui = ui, server = server)
} #app
run_birdproofr_app()
shiny::runApp('birdproofr/R')
runApp('birdproofr/R')
library(dplyr)
runApp('birdproofr/R')
runApp('birdproofr/R')
library(devtools)
usethis::document()
devtools::document()
getwd(0)
getwd()
setwd("birdproofr")
getwd()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
system("R CMD Rd2pdf . --title=Package birdproofr --output=./manual.pdf --force --no-clean --internals")
install.packages("pdflatex")
install.packages(pdflatex)
